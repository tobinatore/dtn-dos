node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
	interface ctrl0
	 ip address 172.16.0.1/24
	!
    }
    canvas c1
    iconcoords {72.0 134.0}
    labelcoords {72.0 166.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward SSH UserDefined}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001:0::2/64
	!
    }
    canvas c1
    iconcoords {181.0 266.0}
    labelcoords {181.0 298.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth6
	 ip address 10.0.7.1/24
	 ipv6 address 2001:7::1/64
	!
	interface eth5
	 ip address 10.0.6.1/24
	 ipv6 address 2001:6::1/64
	!
	interface eth4
	 ip address 10.0.5.1/24
	 ipv6 address 2001:5::1/64
	!
	interface eth3
	 ip address 10.0.4.1/24
	 ipv6 address 2001:4::1/64
	!
	interface eth2
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	!
	interface eth1
	 ip address 10.0.2.1/24
	 ipv6 address 2001:2::1/64
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
    }
    canvas c1
    iconcoords {299.0 208.0}
    labelcoords {299.0 240.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n4}
    interface-peer {eth2 n5}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
    interface-peer {eth3 n6}
    interface-peer {eth4 n7}
    interface-peer {eth5 n8}
    interface-peer {eth6 n9}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.2.2/24
	 ipv6 address 2001:2::2/64
	!
    }
    canvas c1
    iconcoords {864.0 204.0}
    labelcoords {864.0 236.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('sh setup.sh', 'setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    custom-config {
	custom-config-id {service:UserDefined:sh setup.sh}
	custom-command {sh setup.sh}
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.3.2/24
	 ipv6 address 2001:3::2/64
	!
    }
    canvas c1
    iconcoords {66.0 582.0}
    labelcoords {66.0 614.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.4.2/24
	 ipv6 address 2001:4::2/64
	!
    }
    canvas c1
    iconcoords {250.0 591.0}
    labelcoords {250.0 623.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.5.2/24
	 ipv6 address 2001:5::2/64
	!
    }
    canvas c1
    iconcoords {480.0 601.0}
    labelcoords {480.0 633.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.6.2/24
	 ipv6 address 2001:6::2/64
	!
    }
    canvas c1
    iconcoords {669.0 591.0}
    labelcoords {669.0 623.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.7.2/24
	 ipv6 address 2001:7::2/64
	!
    }
    canvas c1
    iconcoords {870.0 584.0}
    labelcoords {870.0 616.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	dirn=`dirname $SESSION_FILENAME`
	sh $dirn/nodeSetup.sh
	}
    }
    services {OSPFv2 OSPFv3 zebra IPForward UserDefined}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

link l5 {
    nodes {n3 n6}
    bandwidth 0
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

link l7 {
    nodes {n3 n8}
    bandwidth 0
}

link l8 {
    nodes {n3 n9}
    bandwidth 0
}

annotation a1 {
    iconcoords {38.0 495.0 932.0 686.0}
    type rectangle
    label {Attackers}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ff4c40
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {2 61 167 217}
    type rectangle
    label {Ground Station}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {781 121 957 285}
    type rectangle
    label {Satellite}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {412 138 741 299}
    type rectangle
    label {LTP}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fff930
    width 0
    border black
    rad 34
    canvas c1
}

annotation a5 {
    iconcoords {422.0 222.0}
    type text
    label {Connection fails regularly (30s on, 30s off)}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    effects {italic}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {433.0 229.0}
    label {}
    canvas c1
}

annotation a7 {
    iconcoords {464.0 246.0}
    type text
    label {to force bundle buildup at n3.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    effects {italic}
    canvas c1
}

annotation a8 {
    iconcoords {82.0 661.0}
    type text
    label {Flood n3 with bundles.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    effects {italic}
    canvas c1
}

annotation a9 {
    type text
    iconcoords {427.0 635.0}
    label {}
    canvas c1
}

annotation a10 {
    type text
    iconcoords {427.0 635.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 5:datacollect_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

BASE=`dirname $SESSION_FILENAME
find $BASE -name "n*_bundles.log" | xargs rm -f 
rm -f $BASE/ping.log
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=
    controlnet0=
    controlnet1=
    controlnet2=
    controlnet3=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    ovs=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

